% ==========================================================================
%
% -----   MONTECARLONOHP  -----
%
% ==========================================================================

function MONTECARLONOHP(ShiftedRelativeDepths, ...
    T0, ...
    k0, ...
    RelativeDepths, ...
    SensorDistance, ...
    MaxMCIterations, ...
    Sigmak0, ...
    SigmakFactors, ...
    kMin, ...
    kMax, ...
    MinThickness, ...
    Mode, ...
    UseFrictional, ...
    FricTime, ...
    FricTemp, ...
    FrictionalDelays, ...
    FricMaxStep, ...
    TimeInc, ...
    HyndmanCoeffs, ...
    SensorRadius, ...
    FricTauMin, ...
    FricTauMax, ...
    VarDist)

global MonteCarloFig PulseData
global FigSpace CMap
global NumberOfSensors BadT Badk SensorsToUse
global PenFile ResName
global LogFileId ResFileId

% MH Debug PC Verbose
disp('running MonteCarlo NO HP')

%
% Define figure
% -------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    MonteCarloFig(1,1) = figure( ...
        'position',[FigSpace], ...
        'color',[0.25 0.25 0.25], ...
        'MenuBar','none', ...
        'numbertitle','off', ...
        'Name',['H - Monte-Carlo Analysis - No Heat Pulse Data']);
    orient landscape;
    
    POINTER(1);
    
    MonteCarloFig(1,2) = axes('position',[0.07 0.18 0.22 0.72]);
    MonteCarloFig(2,2) = axes('position',[0.36 0.18 0.22 0.72]);
    MonteCarloFig(3,2) = axes('position',[0.65 0.18 0.22 0.72]);
    MonteCarloFig(4,2) = axes('position',[0.92 0.18 0.02 0.72]);
    MonteCarloFig(5,2) = axes('position',[0.07 0.09 0.22 0.07]);   
    MonteCarloFig(6,2) = axes('position',[0.36 0.09 0.22 0.07]);
    MonteCarloFig(7,2) = axes('position',[0.65 0.09 0.22 0.07]);
    MonteCarloFig(8,2) = axes('position',[0.02 0.01 0.96 0.06]);
    
    set(gca,'visible','off')
    
end

% Define what sensors to use
% --------------------------

GoodT = setxor([1:NumberOfSensors],BadT);
Goodk = setxor([1:NumberOfSensors],Badk);

TToUse = intersect(GoodT,SensorsToUse);    % SensorsToUse for T.
kToUse = intersect(Goodk,SensorsToUse);    % SensorsToUse for k.

% Initial Bullard calculation
% ---------------------------

[ ...
        SensorsUsedForBullardFit, ...
        GoodkIndex, ...
        ShiftedBullardDepths0, ...
        ShiftedRelativeDepths0, ...
        SigmaR, ...
        PenetrationLag, ...
        Slope0, ...
        Shift ...
] = BULLARDANALYSIS(RelativeDepths, ...
    k0, ...
    T0', ...
    Mode);

QMin = 1/Slope0(2);
QMax = 1/Slope0(2);

% Initialize arrays for iterative process
% ---------------------------------------

Iterations = NaN*ones(MaxMCIterations,1);
T = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Rz = NaN*ones(MaxMCIterations,length(SensorsUsedForBullardFit));
Q = NaN*ones(MaxMCIterations,1);
SigmaHF = NaN*ones(MaxMCIterations,1);

% Generate Random conductivities given ShiftedRelativeDepths !
% ------------------------------------------------------------

Bins = 25;
K0 = repmat(k0(kToUse),MaxMCIterations,1);
k = K0 + repmat(Sigmak0(kToUse),MaxMCIterations,1) ...
    .* randn(MaxMCIterations,length(kToUse));

idx = nan;
while ~isempty(idx)
    [idx,dummy] = find(k<kMin | k>kMax);
    k(idx,:) = K0(idx,:) + repmat(Sigmak0(kToUse),length(idx),1) ...
        .* randn(length(idx),length(kToUse));
end

% Generate Random boundaries given ShiftedRelativeDepths0 !
% ---------------------------------------------------------

zToUse = ShiftedRelativeDepths(kToUse);

zLims = [zToUse(1:length(zToUse)-1) - MinThickness/2; ...
        zToUse(2:length(zToUse)) + MinThickness/2];

zBD = repmat(zLims(1,:),MaxMCIterations,1) ...
    + rand(MaxMCIterations,length(zToUse)-1) ...
    .* repmat(diff(zLims),MaxMCIterations,1);

% Plot Conductivity distribution
% ------------------------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])

    axes(MonteCarloFig(1,2));

    x0 = repmat([k0(kToUse(1)) k0(kToUse)],MaxMCIterations,1);
    y0 = [zToUse(1)*ones(MaxMCIterations,1) zBD zeros(MaxMCIterations,1)];
    Hdl = stairs(x0',y0');
    set(Hdl,'color',[0.35 0.35 0.35])
    hold on
    
    x = [k0(kToUse(1)) k0(kToUse)];
    y = [ShiftedRelativeDepths(kToUse(1)) ShiftedRelativeDepths(kToUse(1:end-1)) ...
            + diff(ShiftedRelativeDepths(kToUse))/2 0];
   
    [N,X] = hist(k,Bins);
    dummy = diff(X);
    X = [X(1)-dummy(1)/2 X'-dummy(1)/2 X(end)+dummy(1)/2 X(end)+dummy(1)/2];
%
    dummy = diff(ShiftedRelativeDepths(kToUse));
    MaxN = max(max(N));
    
    stairs(x,y,'r');
%
% AF 9/02 max height of histograms - for variable spacing
%
           PlotSpace=min(abs(diff(SensorDistance)))
%
    for i = 1:length(kToUse)
        plot(k(:,i),ShiftedRelativeDepths(kToUse(i)),'.', ...
            'color',CMap(kToUse(i),:), ...
            'markersize',4)
% 
% AF 9/02 Scale histograms differently for constant or variable spacing
%
%        Y = ShiftedRelativeDepths(kToUse(i)) ...
%            - SensorDistance*[0 N(:,i)' N(end,i) 0]/MaxN;
%
        if VarDist == 1
           Y = ShiftedRelativeDepths(kToUse(i)) ...
             - PlotSpace*[0 N(:,i)' N(end,i) 0]/MaxN;
        else
           Y = ShiftedRelativeDepths(kToUse(i)) ...
             - SensorDistance*[0 N(:,i)' N(end,i) 0]/MaxN;
        end
%
        Hdl = stairs(X,Y);
        set(Hdl,'color',CMap(kToUse(i),:))
    end
%  
%
    line([kMin kMin],[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'color','r', ...
        'linestyle','--')
    line([kMax kMax],[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'color','r', ...
        'linestyle','--')
%
    set(gca, ...
        'xcolor','r', ...
        'ycolor','r', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 max(ShiftedRelativeDepths(kToUse))+0.5], ...
        'xlim',[kMin-0.05*kMin kMax+0.05*kMax]);
    xlabel('\bfThermal Conductivity (W m^{-1} ^oC^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
%
% AF 9/02 Different label - we don't need to have spacing printed here, caused problems
%         with variable spacing
%
%    ylabel(['\bfRelative Depths (m)  -  Conductivity distributions: ' ...
%            num2str(SensorDistance,'%1.2f') ' m  <=>  N = ' int2str(MaxN) ...
%            ' (' int2str(Bins) ' bins)'], ...
%        'fontsize',12, ...
%        'verticalalignment','bottom')
    ylabel(['\bfRelative Depths (m)  -  Conductivity distributions: '  ...
            ' <=>  N = ' int2str(MaxN) ...
            ' (' int2str(Bins) ' bins)'], ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(5,2));
    MonteCarloFig(1,3) = text(0.5,0.9, ...
        ['Conductivity and Thickness distribution'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r', ...
        'fontweight','bold');
    MonteCarloFig(2,3) = text(0.5,0.6, ...
        ['Gaussian (k)  & Uniform (z) - ' int2str(MaxMCIterations) ' picks at each depth.'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    MonteCarloFig(3,3) = text(0.5,0.3, ...
        ['Mean Standard deviation: ' num2str(mean(Sigmak0),'%1.2f') ' W m^{-1} ^oC^{-1}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    MonteCarloFig(4,3) = text(0.5,0, ...
        ['Minimum thickness: ' num2str(MinThickness) ' m'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','r');
    
    set(MonteCarloFig(5,2),'visible','off')
    
end

% Plot InitialBullard Plot
% ------------------------

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])

    axes(MonteCarloFig(2,2))    
    
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
        hold on
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    set(gca, ...
        'xcolor','g', ...
        'ycolor','g', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 max(ShiftedBullardDepths0)+0.5]);
    xlabel('\bfTemperature ( ^oC)', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfCumulative Thermal Resistance (m^2 ^oC W^{-1})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    
    axes(MonteCarloFig(6,2))
    MonteCarloFig(1,4) = text(0.5,0.9, ...
        ['Heat Flow'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g', ...
        'fontweight','bold');
    MonteCarloFig(2,4) = text(0.5,0.6, ...
        ['With initial conductivity:  ' num2str(1/Slope0(2),'%1.3f') ' W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    MonteCarloFig(3,4) = text(0.5,0.3, ...
        ['At current iteration:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    MonteCarloFig(4,4) = text(0.5,0, ...
        ['Range:  [' num2str(QMin,'%1.3f') ...
            '  ' num2str(QMax,'%1.3f') '] W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','g');
    
    set(MonteCarloFig(6,2),'visible','off')
    
    
    % Initialize Iterations plot
    % --------------------------
    
    axes(MonteCarloFig(3,2))
    set(gca, ...
        'xcolor','y', ...
        'ycolor','y', ...
        'color','k', ...
        'ydir','reverse', ...
        'box','on', ...
        'xaxislocation','top', ...
        'ylim',[0 MaxMCIterations]);
    xlabel('\bfHeat Flow Standard deviation (W m^{-2})', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    ylabel('\bfIteration', ...
        'fontsize',12, ...
        'verticalalignment','bottom')
    hold on
    
    axes(MonteCarloFig(7,2))
    MonteCarloFig(1,5) = text(0.5,0.9, ...
        ['Monte-Carlo Analysis'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y', ...
        'fontweight','bold');
    MonteCarloFig(2,5) = text(0.5,0.6, ...
        ['Current iteration:  NaN/' int2str(MaxMCIterations)], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    MonteCarloFig(3,5) = text(0.5,0.3, ...
        ['Mean Heat Flow:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    MonteCarloFig(4,5) = text(0.5,0, ...
        ['Standard deviation:  NaN W m^{-2}'], ...
        'Fontsize',12, ...
        'Horizontalalignment','center', ...
        'Verticalalignment','bottom', ...
        'color','y');
    set(MonteCarloFig(7,2),'visible','off')
    
    % Plot Sensors colorbar
    % ---------------------
    
    axes(MonteCarloFig(4,2))
    
    AlteredCMap = CMap;
    AlteredCMap(setxor(1:NumberOfSensors,SensorsToUse),:) = ...
        repmat([0.15 0.15 0.15],length(setxor(1:NumberOfSensors,SensorsToUse)),1);
    colormap(AlteredCMap)
    colorbar(MonteCarloFig(4,2))
    caxis([1 NumberOfSensors])
    
    set(MonteCarloFig(4,2), ...
        'xcolor','y', ...
        'ycolor','y', ...
        'ytick',[1.5:NumberOfSensors+0.5], ...
        'yticklabel',[1:NumberOfSensors], ...
        'ticklength',[0 0])
    ylabel('\bfSensor Number', ...
        'verticalalignment','top', ...
        'fontsize',12)
    
end

% Initialize Counters and begin analysis
% --------------------------------------
% MH -- Waitbar
% initialize waitbar
H_wait=waitbar(0,'Iterating...');
set(H_wait,'units','normalized');
set(H_wait,'position',[0.45 0.85 0.25 0.1]);

for n = 1:MaxMCIterations 
    
    Iterations(n) = n;
    
    % MH -- Waitbar
    waitbar(n/MaxMCIterations);
    
    % Plot Current profile
    % --------------------
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(1,2));
        if n>1
            delete(PreviousProfile)
            delete(PreviousPoints)
        end
        PreviousProfile = stairs([k(n,1) k(n,:)],[ShiftedRelativeDepths(kToUse(1)) zBD(n,:) 0]);
        set(PreviousProfile','color',[0.8 0.8 0.8])
        PreviousPoints = plot(k(n,:),ShiftedRelativeDepths(kToUse),'.', ...
            'markersize',8, ...
            'color',[0.95 0.95 0.95]);
    end

    % Frictional Decay processing
    % ---------------------------
    
    if UseFrictional 
        
        kFric = k0;
        kFric(kToUse) = k(n,:);
        
        [	FricUsedPoints, ...
                T0, ...
                FricError, ...
                FricDelays, ...
                FricSlope ...
        ] = FRICTIONAL( ...
            FricTime, ...
            FricTemp, ...
            NumberOfSensors, ...
            FrictionalDelays, ...
            FricMaxStep, ...
            TimeInc, ...
            kFric, ...
            HyndmanCoeffs, ...
            SensorRadius, ...
            FricTauMin, ...
            FricTauMax, ...
            Mode, ...
            UseFrictional);
    end
        
    % Now compute Bullard Depths and Associated Error
    % ----------------------------------------------- 
    
    BullardDepths(length(kToUse)) = zToUse(end)/k(n,end);
    
    for i = length(kToUse)-1:-1:1
        BullardDepths(i) = BullardDepths(i+1) + (zBD(n,i)-zToUse(i+1))/k(n,i+1) ...
            + (zToUse(i)-zBD(n,i))/k(i);
    end
    
    [p,s] = polyfit(T0(SensorsUsedForBullardFit)',BullardDepths(GoodkIndex),1);
    Shift = -p(2);
    Slope = p(1);
    
    ShiftedBullardDepths = BullardDepths + Shift;

    % Now do the Monte-Carlo !
    % ------------------------
    
    AllT(:,n) = T0(SensorsUsedForBullardFit);
    AllBullardDepths(:,n) = ShiftedBullardDepths(GoodkIndex)';
    AllHeatFlows(n) = 1/Slope;
    T(n,:) = mean(AllT,2)';
    SigmaTD = std(AllT,0,2);
    Rz(n,:) = mean(AllBullardDepths,2)';
    SigmaR = std(AllBullardDepths,0,2);
    Q(n) = mean(AllHeatFlows);
    SigmaTI = Q(n)*SigmaR;
    SigmaT = sqrt(SigmaTI.^2 + SigmaTD.^2);
    
    if any(SigmaT == 0)
        Delta = NaN;
        SigmaHF(n) = NaN;
    else
        Delta = sum(1./SigmaT.^2)*sum(Rz(n,:)'.^2./SigmaT.^2) ...
            -(sum(Rz(n,:)'./SigmaT.^2)).^2;
        SigmaHF(n) = sqrt(sum(1./SigmaT.^2)/Delta);
    end

    if 1/Slope>QMax; QMax = 1/Slope; end
    if 1/Slope<QMin; QMin = 1/Slope; end
    
    if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
        
        axes(MonteCarloFig(2,2))
        
        for i = 1:length(SensorsUsedForBullardFit)
            plot(AllT(i,n),AllBullardDepths(i,n),'+', ...
                'markersize',5, ...
                'color',CMap(SensorsUsedForBullardFit(i),:))
        end
        plot([0 max(ShiftedBullardDepths)+0.5]/Slope, ...
            [0 max(ShiftedBullardDepths)+0.5],'w:')
        
        axes(MonteCarloFig(3,2))
        plot(SigmaHF,Iterations,'w-o', ...
            'markersize',4)
        
        set(MonteCarloFig(3,4),'string', ...
            ['At Current Iteration:  ' num2str(1/Slope,'%1.3f') ' W m^{-2}']); 
        set(MonteCarloFig(4,4),'string', ...
            ['Range:  [' num2str(QMin,'%1.3f') ...
                '  ' num2str(QMax,'%1.3f') '] W m^{-2}']);
        set(MonteCarloFig(2,5),'string' ,...
            ['Iteration:  ' int2str(n) '/' int2str(MaxMCIterations)]);
        set(MonteCarloFig(3,5),'string', ...
            ['Mean Heat Flow:  ' num2str(Q(n),'%1.5f') ' W m^{-2}']);
        set(MonteCarloFig(4,5),'string', ...
            ['Standard deviation:  ' num2str(SigmaHF(n),'%1.5f') ' W m^{-2}']);
        
        drawnow
        
    end
end

% MH -- Close waitbar

close(H_wait);

if all(Mode == [2 0]) | all(Mode == [3 5]) | all(Mode == [3 6])
    
    axes(MonteCarloFig(2,2))
    
    for i = 1:length(SensorsUsedForBullardFit)
        plot(T0(SensorsUsedForBullardFit(i)),ShiftedBullardDepths0(GoodkIndex(i)),'o', ...
            'color',CMap(SensorsUsedForBullardFit(i),:), ...
            'markerfacecolor',CMap(SensorsUsedForBullardFit(i),:))
        hold on
    end
    
    plot([0 max(ShiftedBullardDepths0)+0.5]/Slope0(2), ...
        [0 max(ShiftedBullardDepths0)+0.5],'g-','linewidth',1)
    
    % Print and Save buttons
    % ----------------------
    
    axes(MonteCarloFig(8,2))
    MonteCarloFig(1,6) = text(0.5,1,['\bf' ResName], ...
        'verticalalignment','top', ...
        'horizontalalignment','center', ...
        'fontsize',16);
    MonteCarloFig(2,6) = text(0,0.3,['Results: ' pwd '/' ResName '.res'], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(3,6) = text(0,0,['Penetration: ' PenFile], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','left', ...
        'fontsize',9);
    MonteCarloFig(4,6) = text(1,0,['Processed: ' FORMATTIME], ...
        'verticalalignment','bottom', ...
        'horizontalalignment','right', ...
        'fontsize',9);
    set(MonteCarloFig(1:4,6),'visible','off');
    
    CallBackPrintString = ['global MonteCarloFig; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''on''); ' ...
            'print -dps -noui -f' num2str(MonteCarloFig(1,1)) '; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'refresh'];
    MonteCarloFig(1,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.02 0.02 0.08 0.035], ...
        'string','Print', ...
        'tooltipstring','Click to send this figure to your default printer (B&W)', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackPrintString);
   CallBackSaveString = ['global MonteCarloFig ResName; ' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'set(MonteCarloFig(3:4,2),''xcolor'',''y'',''ycolor'',''y''); ' ...
            'set(MonteCarloFig(1:4,5),''color'',''y''); ' ...
            'PrintName = char(inputdlg(' ...
            '{''Enter file name:''},' ...
            '''Tiff file name'',' ...
            '[1 48],{[''05_'' ResName ''_MonteCarlo.tiff'']})); ' ...
            'ScreenSize = get(0,''screensize''); ' ...
            'ScreenSize(4) = ScreenSize(4)*0.95; ' ...
            'pause(1); ' ...
            'eval([''screencapture(0,''''position'''', ScreenSize ,'''''',PrintName,'''''');'']);' ...
            'set(MonteCarloFig(1:4,6),''visible'',''off''); ' ...
            'set(MonteCarloFig(3:4,2),''xcolor'',''y'',''ycolor'',''y''); ' ...
            'set(MonteCarloFig(1:4,5),''color'',''y''); ' ...         
            'refresh'];
    MonteCarloFig(2,7) = uicontrol('Style','pushbutton', ...
        'units','normalized', ...
        'position',[0.1 0.02 0.08 0.035], ...
        'string','Screengrab', ...
        'fontsize',12, ...
        'backgroundcolor',[0.15 0.15 0.15], ...
        'foregroundcolor','y', ...
        'callback',CallBackSaveString);
    
end

if  all(Mode == [3 5]) | all(Mode == [3 6])
    
    set(MonteCarloFig(1:4,6),'visible','on');
    set(MonteCarloFig(3:4,2),'xcolor','k','ycolor','k')
    set(MonteCarloFig(1:4,5),'color','k')
    PrintName = [ResName '_Monte-Carlo.ps'];
    eval(['print -dpsc -noui -f' num2str(MonteCarloFig(1,1)) ' ' PrintName]);
    set(MonteCarloFig(1:4,6),'visible','off');
    set(MonteCarloFig(3:4,2),'xcolor','y','ycolor','y')
    set(MonteCarloFig(1:4,5),'color','y')
    refresh;
    
end

PRINTOUTMCRESULTS( ...
    MaxMCIterations, ...
    T(end,:), ...
    Rz(end,:), ...
    Q(end), ...
    SigmaHF(end), ...
    QMin, ...
    QMax, ...
    ShiftedRelativeDepths, ...
    RelativeDepths, ...
    k0, ...
    MinThickness, ...
    T0, ...
    SensorsUsedForBullardFit, ...
    kToUse, ...
    k, ...
    kMin, ...
    kMax, ...
    Sigmak0, ...
    SigmakFactors, ...
    UseFrictional);

eval([' save ' ResName '_MonteCarlo ' ...
        'MaxMCIterations T Rz Q SigmaHF QMin QMax SensorsUsedForBullardFit ' ...
        'RelativeDepths ShiftedRelativeDepths k0 T0 MinThickness kMin kMax ' ...
        'Sigmak0 UseFrictional']);

STATUS(LogFileId,['Saved mat file: ' ResName ...
        '_MonteCarlo.mat with Monte-Carlo analysis results ...'],2); 

